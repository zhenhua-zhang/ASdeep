#!/bin/bash
#
## A pipeline of Allele-specific expression analysi by exploiting Fastq, STAR, WASP and SAMtools
#

source ./utils

set -o errexit
set -o errtrace

export SCRIPT_VERSOIN="0.1.0"

echo_version() {
    cat << EOF

$(basename $0), Version ${SCRIPT_VERSOIN:=UNKNOWN}
EOF
}

echo_usage() {
    cat <<EOF

Usage: ./$0 [options]
    or bash $0 [options]
EOF
}

echo_help() {
    cat <<EOF
$(basename $0), Version ${SCRIPT_VERSOIN:=UNKNOWN}

Help:
  -h, --help    Optional. Action: print_info
    Print this help context and exit.
  -u, --usage    Optional. Action: print_info
    Print usage context and exit.
  -V, --version    Optional. Action: store_true
    Print version of current script and exit.

More information please contact Zhenhua Zhang <zhenhua.zhang217@gmail.com>
EOF
}


opt=$(getopt -l "workDir:,fastqId:,snpHdf5db:,help,usage,version" -- "w:i:p:g:f:a:v:" $@)
eval set -- ${opt}
while true; do
    case $1 in
        -w|--workDir) shift && workdir=$1 ;;
        -i|--fastqId) shift && fastqID=$1 ;;
        -p|--fastqDir) shift && fastqDir=$1 ;;
        -g|--genomeDir) shift && genomeDir=$1 ;;
        -f|--genomeFastaFile) shift && genomeFastaFile=$1;;
        -a|--genomeAnnotationsFile) shift && genomeAnnotationsFile=$1 ;;
        -v|--vcfFile) shift && vcfFile=$1 ;;  # the SNP hDF5 database
        --help) echo_help && exit 0;;
        --usage) echo_usage && exit 0;;
        --version) echo_version && exit 0;;
        --) echo_help && exit 0;;
        *) ehco_help && exit 0;;
    esac
    shift
done

# Setup working directories for current project
" How the working tree looks like
WORKDIR/
├── [genomedir/]
├── [snpHDF5db/]
├── optdir/
│   └── FASTQID/
│       ├── fastpOptdir/
│       ├── starOptdir/
│       └── waspOptdir/
└── tmpdir/
    └── FASTQID/
        ├── fastpTmpdir/
        ├── starTmpdir/
        └── waspTmpdir/
"

workDir=${workDir:?-w/--workDir is required}
fastqId=${fastqId:?-s/--fastqId is required}  # ${fastqId}_R1.fq.gz & ${fastqId}_R2.fq.gz
fastqDir=${fastqDir:?-p/--fastqDir is required}

if [ -z ${genomeDir} ]; then
    if [ -z ${genomeFastaFile} ]; then
        ERRO "Either -g/--genomeDir or -f/--genomeFastaFile should be given!"
    fi

    # Setup the path of STAR genome index
    genomeDir=${genomeDir:=${workDir}/genomedir}
else
    if [ -n ${genomeFastaFile} ]; then
        ERRO "Either -g/--genomeDir or -f/--genomeFastaFile should be given, but not both!"
    fi
fi

if [ -d $workDir/tmpdir/$fastqId -o -d $workDir/optdir/$fastqId ]; then
    ERRO "It looks you have worked on ${fastqId}"
fi

mkdir -p $workDir/tmpdir/$fastqId/{fastp,star,wasp}Tmpdir
mkdir -p $workDir/optdir/$fastqId/{fastp,star,wasp}Optdir

# Preprocessing fastq files. Current only for paired-end FASTQs
FastpPreproc=$(sbatch --time=0:30:00 --cpus=10 --mem=5G \
    --output=%j-%u-${fastqId}-FastpPreprocessing.log \
    --job-name=FastpPreprocessing \
    ../scripts/FastpPreprocessing.sh \
    -w ${workDir} \
    -i ${fastqId} \
    -p ${fastqDir}
)

# Create STAR genome index.
# The index was made on human genome build 37, using transcript annotations (V75) downloaded from
# Ensembl. The genome index should be constructed with annotations.
if [ ! -d ${genomeDir} ]; then
    mkdir -p ${workDir}/genomedir
    STARGenomeIndex=$(sbatch --time=0:10:00 --cpus=10 --mem=120G \
        --output=%j-%u-${fastqId}-StarBuildGenomeIndex.log \
        --job-name=StarBuildGenomeIndex \
        ./scripts/StarBuildGenomeIndex.sh \
        -w ${workDir} \
        -g ${genomeDir} \
        -f ${genomeFastaFile} \
        -a ${genomeAnnotationsFile}
    )
else
    INFO "Found ${genomeDir}, supposing it as a legal STAR genome index"
fi

# STAR first round of mapping
if [ -z $STARGenomeIndex ]; then
    dependency=$FastpPreproc
else
    dependency=$FastpPreproc:$STARGenomeIndex
fi

STARFirstMapping=$(sbatch --dependency=afterok:$dependency \
    --time=0:10:00 --cpus=10 --mem=40G \
    --output=%j-%u-${fastqId}-StarFirstMapping.log \
    --job-name=StarFirstMapping \
    ../scripts/StarFirstMapping.sh \
    -w ${workDir} \
    -g ${genomeDir} \
    -i ${fastqId}
)

# Split BAM file by chromosome
SAMtoolsSplitBAMbyChr=$(sbatch --dependency=afterok:$STARFirstMapping \
    --mem=10G --cpus=4 --ntasks=1 --array=1-22 \
    --output=%j-%u-${fastqId}-SAMtoolsSplitBAMbyChr.log \
    --job-name=SAMtoolsSplitBAMbyChr \
    ../scripts/SamtoolsSplitBAMbyChr.sh \
    -w ${workDir} \
    -i ${fastqId}
)

# Create HDF5 database for given genome variant files
if [ ! -d $workDir/snpHDF5db ]; then
    WASPSnp2Hdf5=$(sbatch --mem=10G --cpus=4 --ntasks=1 \
        --output=%j-%u-${fastqId}-WASPSnp2Hdf5.log \
        --job-name=WASPSnp2Hdf5 \
        ../scripts/WaspCreateSnpHdf5Database.sh
    )
fi

# WASP pipeline run array
if [ -z ${WASPSnp2Hdf5} ]; then
    dependency=$SAMtoolsSplitBAMbyChr
else
    dependency=$WASPSnp2Hdf5:$SAMtoolsSplitBAMbyChr
fi

WASPPipelinePerChr=$(sbatch --dependency=afterok:$dependency \
    --mem=10G --cpus=4 --ntasks=1 \
    --output=%j-%u-${fastqId}-WASPPipelinePerChr.log \
    --job-name=WASPPipelinePerChr \
    ../scripts/WaspPipelinePerChr.sh
)

# Collect output and clean up
sbatch --dependency=afterok:$WASPPipelinePerChr \
    --mem=10G --cpus=4 --ntasks=1 \
    --output=%j-%u-${fastqId}-CollectOutputAndCleanup.log \
    --job-name=CollectOutputAndCleanup \
    ../scripts/CollectOutputAndCleanup.sh

