#!/bin/bash
#
## ASE analysis pipeline by fastp, STAR, WASP, and SAMtools
#

set -o errexit
set -o errtrace

export WASPPL_SCRIPT_VERSOIN="0.1.0"
export WASPPL_SCRIPT_PATH="$(dirname $(readlink -f $0))"

if [ -f ${WASPPL_SCRIPT_PATH}/utils.sh ]; then
    source ${WASPPL_SCRIPT_PATH}/utils.sh
else
    echo "Failed to load utils.sh, which is mandatory. Exit(-1) ..."
    exit -1
fi

echo_version() {
    cat << EOF

$(basename $0), Version ${WASPPL_SCRIPT_VERSOIN:=UNKNOWN}

EOF
}

echo_help() {
    cat <<EOF

$(basename $0), Version ${WASPPL_SCRIPT_VERSOIN:=UNKNOWN}

It is recommended to use the a configuration file instead of commandline
arguments and flags. Please check the \`./config\` file for more information.

Help:
  -c|--config    Optional.
      The confituration file to supply values for the variables
  -w|--workDir    Required.
      The working directory.
  -i|--fastqId    Required.
      The FASTQ files id.
  -p|--fastqDir    Required.
      The directory to the FASTQ files.
  -g|--genomeDir    Required.
      The path to the genome index.
  --genomeFastaFile    Required.
      The path to the FASTA file of genome file.
  --genomeAnnotationsFile    Required.
      The path to the gene structure file.
  --snph5db    Required.
      The path to the HDF5 database for variants
  --snp2h5Exe    Optional.
      The path to the executable snp2h5 by WASP pipeline.
  --vcfFileDir    Optional
      The path to the variant call format(VCF) file holding variants information.
  --chromInfoFile    Required.
      The file holding chromosome information.
  --fastah5db    Optional
      The path to the HDF5 database for geome sequence
  --fasta2h5Exe   Optional
      The path to the executable fasta2h5 by WASP pipeline.
  --waspPath  Required.
      The path to the WASP tool.
  --virtualEnv  Required.
      The path to the python virtual enviroment.
  --sampleIdFile
      The path to file holding sample ID.
  -h|--help    Optional. Action: print_info
    Print this help context and exit.
  -V|--version    Optional. Action: store_true
    Print version of current script and exit.

More information please contact Zhenhua Zhang <zhenhua.zhang217@gmail.com>

EOF
}

long_opts=$long_opts"config:,workDir:,"
long_opts=$long_opts"fastqId:,fastqDir:,"
long_opts=$long_opts"genomeDir:,genomeFastaFile:,"
long_opts=$long_opts"snph5db:,snp2h5Exe:,vcfFileDir:,chromInfoFile:,"
long_opts=$long_opts"fastah5db:,fasta2h5Exe:,"
long_opts=$long_opts"waspPath:,virtualEnv:,sampleIdFile:,"
long_opts=$long_opts"help,version"

opt=$(getopt -l $long_opts -- "c:w:i:p:g:hV" "$@")
eval set -- $opt
while true; do
    case $1 in
        -c|--config) shift && config=$1 && break ;;
        -w|--workDir) shift && workDir=$1 ;;

        -i|--fastqId) shift && fastqId=$1 ;;
        -p|--fastqDir) shift && fastqDir=$1 ;;

        -g|--genomeDir) shift && genomeDir=$1 ;;
        --genomeFastaFile) shift && genomeFastaFile=$1;;
        --genomeAnnotationsFile) shift && genomeAnnotationsFile=$1 ;;

        --snph5db) shift && snph5db=$1 ;;
        --snp2h5Exe) shift && snp2h5Exe=$1 ;;
        --vcfFileDir) shift && vcfFileDir=$1 ;;
        --chromInfoFile) shift && chromInfoFile=$1 ;;

        --fastah5db) shift && fastah5db=$1 ;;
        --fasta2h5Exe) shift && fasta2h5Exe=$1 ;;

        --waspPath) shift && waspPath=$1 ;;
        --virtualEnv) shift && virtualEnv=$1 ;;
        --sampleIdFile) shift && sampleIdFile=$1 ;;

        -h|--help) echo_help && exit 0 ;;
        -V|--version) echo_version && exit 0 ;;
        --) shift && break ;;
    esac
    shift
done

# Setup working directories for current project
cat >/dev/null << EOF
How the working tree looks like
WORKDIR/
├── [genomedir/]
├── [snph5db/]
├── [fastah5db/]
├── optdir/
│   └── FASTQID/
│       ├── fastpReports/
│       ├── misc/
│       └── starBAMs/
└── tmpdir
    └── FASTQID
        ├── fastpTmpdir/
        ├── starTmpdir/
        └── waspTmpdir/
            ├── perChrom/
            └── starMapping/
EOF

if [ "xxx"$config == "xxx" ]; then
    workDir=${workDir:?-w/--workDir is required}
    fastqId=${fastqId:?-s/--fastqId is required}  # ${fastqId}_R1.fq.gz & ${fastqId}_R2.fq.gz
    fastqDir=${fastqDir:?-p/--fastqDir is required}

    if [ $genomeDir"xxx" == "xxx" ]; then
        if [ $genomeFastaFile"xxx" == "xxx" ]; then
            ERRO "Either -g/--genomeDir or -f/--genomeFastaFile should be given!"
        fi

        # Setup the path of STAR genome index
        genomeDir=${genomeDir:=$workDir/genomedir}
    else
        if [ $genomeFastaFile"xxx" != "xxx" ]; then
            ERRO "Either -g/--genomeDir or -f/--genomeFastaFile should be given, but not both!"
        fi
    fi
else
    if [ -f $config ]; then
        source $config
    else
        ERRO "Not found $config to read"
    fi
fi

# if [ -d $workDir/optdir/$fastqId ]; then
#     ERRO "It looks you have worked on $fastqId"
# fi

mkdir -p $workDir/tmpdir/$fastqId/{fastp,star,wasp}Tmpdir
mkdir -p $workDir/optdir/$fastqId/{fastp,star,wasp}Optdir
mkdir -p $workDir/logdir

afterok="--dependency=afterok"  # NOTE: the colon after the afterok is maully added

# Preprocessing fastq files. Current only for paired-end FASTQs. It can only use up to 16 CPUs.
FastpPreproc=$(sbatch --time=0:30:00 --cpus=16 --mem=5G \
    --output=$workDir/logdir/%j-%u-$fastqId-FastpPreprocessing.log \
    --job-name=FastpPreprocessing \
    --export=WASPPL_SCRIPT_PATH=${WASPPL_SCRIPT_PATH} \
    ../scripts/FastpPreprocessing.sh \
    -w $workDir \
    -i $fastqId \
    -q $fastqDir \
    | cut -d' ' -f4
)
INFO "FastpPreproc was submitted: $FastpPreproc ..."

# TODO: Conflicts between CLI options. If genomeDir is given, genomeFastaFile is not mandatory
# Create STAR genome index. It requires at least 120G memory and 1.5 hours when using 15 cores.
# The index was made on human genome build 37, using transcript annotations (V75) downloaded from
# Ensembl. The genome index should be constructed with annotations.
if [ -d $genomeDir ]; then
    INFO "Found $genomeDir, supposing it as a legal STAR genome index, skip STARGenomeIndex.sh"
    dependency=$afterok:$FastpPreproc
else
    if [ $genomeFastaFile"xxx" == "xxx" ]; then
        ERRO "No genome index found, please specify genome fasta file to create the genome index"
    fi

    if [ $genomeAnnotationsFile"xxx" == "xxx" ]; then
        ERRO "No genome index found, please specify genome annotation file to create the genome index"
    fi

    mkdir -p $workDir/genomedir
    STARGenomeIndex=$(sbatch --time=1:29:50 --cpus=15 --mem=150G \
        --output=$workDir/logdir/%j-%u-STARBuildGenomeIndex.log \
        --job-name=StarBuildGenomeIndex \
        --export=WASPPL_SCRIPT_PATH=${WASPPL_SCRIPT_PATH} \
        ../scripts/STARBuildGenomeIndex.sh \
        -w $workDir \
        -g $genomeDir \
        -f $genomeFastaFile \
        -a $genomeAnnotationsFile \
        | cut -d' ' -f4
    )
    INFO "STARGenomeIndex was submitted: $STARGenomeIndex ..."
    dependency=$afterok:$FastpPreproc:$STARGenomeIndex
fi


# For human genome, it requires at least 40G memory.
STARMapping=$(sbatch $dependency \
    --time=0:39:00 --cpus=20 --mem=50G \
    --output=$workDir/logdir/%j-%u-$fastqId-STARMapping.log \
    --job-name=STARMapping \
    --export=WASPPL_SCRIPT_PATH=${WASPPL_SCRIPT_PATH} \
    ../scripts/STARMapping.sh \
    -w $workDir \
    -g $genomeDir \
    -i $fastqId \
    -p $workDir/tmpdir/$fastqId/fastpTmpdir/ \
    -o $workDir/tmpdir/$fastqId/starTmpdir/$fastqId \
    --fq1Pattern *R1_paired.fq.gz \
    --fq2Pattern *R2_paired.fq.gz \
    | cut -d' ' -f4
)
INFO "STARMapping was submitted: $STARMapping ..."


if [ -d $snph5db ]; then
    INFO "Found $snph5db, supposing it as a legal SNP HDF5 database, skip WaspCreateSnpHdf5Database.sh"
    dependency=$afterok:$STARMapping
else
    WaspCreateSnpHdf5Database=$(sbatch \
        --time=0:29:0 --mem=5G --cpus=1 --array=1-22 \
        --output=$workDir/logdir/%A_%a-%u-WaspCreateSnpHdf5Database.log \
        --job-name=WaspCreateSnpHdf5Database \
        --export=WASPPL_SCRIPT_PATH=${WASPPL_SCRIPT_PATH} \
        ../scripts/WaspCreateSnpHdf5Database.sh \
        -w $workDir \
        -v $vcfFileDir \
        -c $chromInfoFile \
        -e $snp2h5Exe \
        | cut -d' ' -f4
    )
    INFO "WaspCreateSnpHdf5Database was submitted: $WaspCreateSnpHdf5Database ..."
    dependency=$afterok:$STARMapping:$WaspCreateSnpHdf5Database
fi


if [ -d $fastah5db ]; then
    INFO "Found $fastah5db, supposing it as a legal fasta HDF5 database, skip WaspCreateFastaHdf5Database.sh"
else
    WaspCreateFastaHdf5Database=$(sbatch \
        --time=0:59:0 --mem=5G --cpus=1 \
        --output=$workDir/logdir/%j-%u-WaspCreateFastaHdf5Database.log \
        --job-name=WaspCreateFastaHdf5Database \
        --export=WASPPL_SCRIPT_PATH=${WASPPL_SCRIPT_PATH} \
        ../scripts/WaspCreateFastaHdf5Database.sh \
        -w $workDir \
        -s $genomeFastaFile \
        -c $chromInfoFile \
        -e $fasta2h5Exe \
        | cut -d' ' -f4
    )
    INFO "WaspCreateFastaHdf5Database was submitted: $WaspCreateFastaHdf5Database ..."
fi

# Find intersected SNPs
WaspRMBFindIntersectedSnps=$(sbatch $dependency \
    --time=0:25:0 --mem=8G --cpus=1 --ntasks=1 --array=1-22 \
    --output=$workDir/logdir/%A_%a-%u-$fastqId-WaspRMBFindIntersectedSnps.log \
    --job-name=WaspRMBFindIntersectedSnps \
    --export=WASPPL_SCRIPT_PATH=${WASPPL_SCRIPT_PATH} \
    ../scripts/WaspRMBFindIntersectedSnps.sh \
    -w $workDir \
    -i $fastqId \
    -d $snph5db \
    -W $waspPath \
    -v $virtualEnv \
    -s $sampleIdFile \
    | cut -d' ' -f4
)
INFO "WaspRMBFindIntersectedSnps was submitted: $WaspRMBFindIntersectedSnps ..."


# Remapping by STAR
mkdir -p $workDir/tmpdir/$fastqId/waspTmpdir/starMapping
dependency=$afterok:$WaspRMBFindIntersectedSnps
WaspRMBRemapping=$(sbatch $dependency \
    --time=0:45:0 --mem=50G --cpus=15 \
    --output=$workDir/logdir/%j-%u-$fastqId-WaspRMBRemapping.log \
    --job-name=WaspRMBRemapping \
    --export=WASPPL_SCRIPT_PATH=${WASPPL_SCRIPT_PATH} \
    ../scripts/STARMapping.sh \
    -w $workDir \
    -g $genomeDir \
    -i $fastqId \
    -p $workDir/tmpdir/$fastqId/waspTmpdir/perChrom \
    -o $workDir/tmpdir/$fastqId/waspTmpdir/starMapping/$fastqId \
    --fq1Pattern */*fq1.gz \
    --fq2Pattern */*fq2.gz \
    | cut -d' ' -f4
)
INFO "WaspRMBRemapping was submitted: $WaspRMBRemapping ..."

dependency=$afterok:$WaspRMBRemapping
WaspRMBFilterAndRmDup=$(sbatch $dependency \
    --time=0:25:0 --mem=10G --cpus=1 --ntasks=1 --array=1-22 \
    --output=$workDir/logdir/%A_%a-%u-$fastqId-WaspRMBFilterAndRmDup.log \
    --job-name=WaspRMBFilterAndRmDup \
    --export=WASPPL_SCRIPT_PATH=${WASPPL_SCRIPT_PATH} \
    ../scripts/WaspRMBFilterAndRmDup.sh \
    -w $workDir \
    -i $fastqId \
    -d $snph5db \
    -s $sampleIdFile \
    -W $waspPath \
    -v $virtualEnv \
    -c $chromInfoFile \
    | cut -d' ' -f4
)
INFO "WaspRMBFilterAndRmDup was submitted: $WaspRMBFilterAndRmDup ..."

# Collect output and clean up
dependency=$afterok:$WaspRMBFilterAndRmDup
CollectOutputAndCleanup=$(sbatch $dependency \
    --time=0:10:0 --mem=20G --cpus=10 --ntasks=1 \
    --output=$workDir/logdir/%j-%u-$fastqId-CollectOutputAndCleanup.log \
    --job-name=CollectOutputAndCleanup \
    --export=WASPPL_SCRIPT_PATH=${WASPPL_SCRIPT_PATH} \
    ../scripts/CollectOutputAndCleanup.sh \
    -w $workDir \
    -i $fastqId \
    | cut -d' ' -f4
)
