#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Author      : Zhenhua Zhang
# Email       : zhenhua.zhang217@gmail.com
# License     : MIT
# Create date : 2020-03-07
# Last update : 2020 Apr 18 14:46:58

"""Deep learning methods to predict allele-specific expression effects by
integrating RNA-seq results and haplotypes.

Note:
    The package is a allele-specific expression analysis tool using the output
    from WASP.

Dependency:
    - PyTorch (>= 1.4.0)
    - Matplotlib
    - PyTables
    - Pandas
    - Numpy

Usage:

TDOO:
"""

import argparse
import logging
import math
import os
import sys

import pandas as pds
from statsmodels.stats.multitest import fdrcorrection

import seaborn as sbn

sys.path.append(os.path.split(sys.path[0])[0])

logger = logging.getLogger("matplotlib")
logger.setLevel(logging.INFO)
logger = logging.getLogger(__name__)
fmt = logging.Formatter("| {levelname: ^8} | {asctime} | {name}: {message}", datefmt="%Y-%m-%d %H:%M:%S %p", style="{")
cs_handle = logging.StreamHandler()
cs_handle.setLevel(logging.DEBUG)
cs_handle.setFormatter(fmt)
logger.addHandler(cs_handle)
logger.setLevel(logging.INFO)


def get_args():
    """Get CLI arguments.
    """
    parser = argparse.ArgumentParser(description="A package working on allele-specific expression.")
    parser.add_argument("-l", "--log-file", action="store", dest="log_file", default=None, help="The file into which logging write.")
    parser.add_argument("-v", "--verbose-level", action="count", dest="verbose_level", default=0, help="Verbose level. A counting keyword argument.")

    sub_parsers = parser.add_subparsers(prog="asedlp", dest="subcmd")
    quant_parser = sub_parsers.add_parser("quant", help="Quantification of ASE effects")
    quant_parser.add_argument("-i", "--sample-id", required=True, dest="sample_id", help="The sample ID.")
    quant_parser.add_argument("-g", "--gene-ids", nargs="+", default=[], dest="gene_ids", help="The gene IDs. Default: %(default)s")
    quant_parser.add_argument("-G", "--gene-id-file", default=None, dest="gene_id_file", help="The file from which read the gene ids. Default: %(default)s")
    quant_parser.add_argument("--haplotypes", default="./haps.h5", dest="haplotypes", help="Path to HDF5 file to read phased haplotypes from. Default: %(default)s")
    quant_parser.add_argument("--snp-tab", default="./snp_tab.h5", dest="snp_tab", help="Path to HDF5 file to read SNP information from. Default: %(default)s")
    quant_parser.add_argument("--snp-index", default="./snp_idex.h5", dest="snp_index", help="Path to HDF5 file to read SNP index from. Default: %(default)s")
    quant_parser.add_argument("--sequence-tab", default="./seq_tab.h5", dest="seq_tab", help="Path to HDF5 file to read reference sequence from. Default: %(default)s")
    quant_parser.add_argument("--ref-read-counts", default="./ref_count_tab.h5", dest="ref_tab", help="Path to HDF5 file to read reference reads counts from. Default: %(default)s")
    quant_parser.add_argument("--alt-read-counts", default="./alt_count_tab.h5", dest="alt_tab", help="Path to HDF5 file to read alternative reads counts from. Default: %(default)s")
    quant_parser.add_argument("--genome-annot", default="./genome.gff", dest="genome_annot", help="Path to GFF / GTF file to read gene structure information from. Default: %(default)s")
    quant_parser.add_argument("--shift-factor", default=5e2, dest="bp_shift_factor", help="Number of base pairs shift from the start codon, the strand will be considered. Default: %(default)s")
    quant_parser.add_argument("--save-as-ase-report", default=None, dest="as_ase_report", help="The file to which write the ASE effect into. Default: %(default)s")
    quant_parser.add_argument("--save-as-train-set", default=None, dest="as_train_set", help="The file to which write the training dataset into. Default: %(default)s")

    merge_parser = sub_parsers.add_parser("merge", help="Merge allele specific expression quantification report by subcommand quant")
    merge_parser.add_argument("-r", "--report-files", required=True, dest="report_files", nargs="*", help="The pattern to read input files. Sometimes, you need quotation mark to ensure the pattern is not expaned by the bash parser. Default: %(default)s")
    merge_parser.add_argument("-p", "--save-prefix", default="heatmap.pdf", dest="save_prefix", help="The file to which write the heatmap into. Default: %(default)s")
    merge_parser.add_argument("--genome-annot", default="./genome.gff", dest="genome_annot", help="Path to GFF / GTF file to read gene structure information from. Default: %(default)s")

    train_parser = sub_parsers.add_parser("train", help="Train the model on quantfified ASE effects.")
    train_parser.add_argument("-p", "--file-pat", required=True, dest="file_pat", help="The pattern to read input files. Sometimes, you need quotation mark to ensure the pattern is not expaned by the bash parser. Default: %(default)s")
    train_parser.add_argument("-g", "--gene-id", default="all", dest="gene_id", help="The Ensembl id of a gene for which train the model. Default: %(default)s")
    train_parser.add_argument("-s", "--model-state-path", default="./torch_model.pth", dest="model_state_path", help="The path to which save the model state dict. Default: %(default)s") 
    train_parser.add_argument("-e", "--n-epoch", default=50, type=int, dest="n_epoch", help="The number of epoch will be run. Default: %(default)s")
    train_parser.add_argument("-x", "--cv-times", default=8, type=int, dest="cv_times", help="Times of cross-validation. Default: %(default)s")

    pred_parser = sub_parsers.add_parser("pred", help="Predict based on given net work state")
    pred_parser.add_argument("-p", "--file-pat", default="**/*.npz", dest="file_pat", help="The pattern to read input files. Sometimes, you need quotation mark to ensure the pattern is not expaned by the bash parser Default: %(default)s")
    pred_parser.add_argument("-g", "--gene-id", default="all", dest="gene_id", help="The Ensembl id of a gene for which train the model. Default: %(default)s")
    pred_parser.add_argument("-s", "--model-state", default="model_state.pth", dest="model_state", help="The model state to be loaded.  Default: %(default)s")

    return parser


def quant(args):
    """Qunatify the allele-specific expression effect for genes.
    """
    try:
        from ased.ASEFactory import ASEFactory
    except ImportError as ime:
        logger.error("Import error: {}".format(ime))
        sys.exit(1)
    afactory = ASEFactory(args)
    afactory.init().gen_gnm_itvl().gen_seq_mtrx().gen_ase_effect().save_ase_report().save_train_set().shutdown()


def merge(args):
    """Merge ASE quantification report and generate basic statistical analysis.
    """
    try:
        from ased.ASEReport import ASEReport
    except ImportError as ime:
        logger.error("Import error: {}".format(ime))
        sys.exit()

    file_path_list = args.report_files
    genome_annot = args.genome_annot
    save_prefix = args.save_prefix
    ase_report = ASEReport(file_path_list, save_prefix, genome_annot=genome_annot)
    ase_report.init() \
            .report() \
            .visualize()


def train(args):
    try:
        from ased.DLPFactory import DLPFactory, CNNModel
    except ImportError as ime:
        logger.error("Import error: {}".format(ime))
        sys.exit(1)

    file_pat = args.file_pat
    gene_id = args.gene_id
    n_epoch = args.n_epoch
    cv_times = args.cv_times
    model_state_path = args.model_state_path

    net = CNNModel()
    # logger.debug(summary(net, input_size=(1, 128, 128)))
    dfactory = DLPFactory(net, gene_id, file_pat)
    dfactory.init() \
            .load_dataset() \
            .k_cv_split(cv_times) \
            .train(eps=n_epoch) \
            .save_model(model_state_path)


def pred(args):
    try:
        from ased.DLPFactory import DLPFactory, CNNModel
    except ImportError as ime:
        logger.error("Import error: {}".format(ime))
        sys.exit(1)
    raise NotImplementedError("Not implemented yet!!!")


def main():
    parser = get_args()
    args = parser.parse_args()
    if args.subcmd == "quant":
        quant(args)
    if args.subcmd == "merge":
        merge(args)
    elif args.subcmd == 'train':
        train(args)
    elif args.subcmd == 'pred':
        pred(args)
    else:
        parser.print_help()
        raise Exception("Unknown subcommand")


if __name__ == '__main__':
    main()
